plugins {
    id 'java'
    id 'war'
}

group 'org.zerock'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // 오 이거 내가 프로젝트 만들 때 서블릿 체크했더니 이렇게 추가 된다. 의존성 주입이라는게 이런 빌드 추가임
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')



    // 마리아 DB 드라이브
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.4'

    // 커넥션 풀 : 연결은 헤카리 cp 를 쓴다. // 마리아 DB 는 데이터 베이스고 그걸 연결하는게 헤카리 CP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'



    // 마이 바티스와 마이바티스 스프링
    // 개발시 Mapper 인터페이스라는 방식을 이용해 인터페이스만으로 모든 개발이 가능하다. ( 옛날에는 메퍼에. 멤버에. sql문 id 찾아가는거 )
    // 이제는 조금 더 느낌있게 해주는듯

    // Spring JDBC 는 JDBC 를 사용하는 코드와 데이터베이스 공급업체 특정 오류 코드의 구문 분석을 단순화하는 추상화 계층을 제공한다.
    implementation group: 'org.springframework', name: 'spring-jdbc', version: '5.3.19'

    // 특수 인터페이스 또는 POJO를 구현하는 클래스에 대한 프로그래밍 및 선언적 트랜젝션 관리를 지원한다.
    implementation group: 'org.springframework', name: 'spring-tx', version: '5.3.19'

    // MyBatis SQL 매퍼 프레임워크는 관계형 데이터베이스를 객체 지향 애플리케이션과 함께 사용하기 쉽게 해준다.
    // Mybatis 는 XML 설명자 또는 주석을 사용하여 저장 프로시저 또는 SQL 문과 개체를 연결합니다. 단순성은 개체 관계형 매핑 도구에 비해 Mybatis 데이터 매퍼의 가장 큰 장점입니다.
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.9'
    
    // MyBatis SQL 매핑 프레임워크를 위한 사용하기 쉬운 Spring 브라우저 : 이거 덕분에 매퍼에 뭐뭐뭐 안 해도 되나봄
    implementation group: 'org.mybatis', name: 'mybatis-spring', version: '2.0.7'




    // 스프링을 쓰기 위한 라이브러리
    // 1. 가장 핵심인 스프링 코어 : Ioc와 DI를 위한 스프링 핵심
    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.27'
    // 2. 컨택스트 : 컨택스트를 인식하기 위해 : Beans 의 기능을 상속화 한다. : 컨텍스트의
    implementation group: 'org.springframework', name: 'spring-context', version: '5.3.27'
    // 3. Mock (Mock : 모조품) 객체를 제공 // 일관된 로딩 및 캐싱을 제공 코드를 격리 테스트 용도
    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.3.27'




    // log4j 관련 라이브러리
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.2'





    // 롬복 라이브러리다. 롬복이 뭐냐?
    // 자동 리소스 관리, getter, setter, equals, hashCode 및 toString의 자동 생성 등 자바를 멋지게 꾸밀 수 있습니다!
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
//  compileOnly 'org.projectlombok lombok: 1.18.24' // 선생님은 이렇게 줄여서 썼다. n년차 개발자 느낌
    annotationProcessor 'org.projectlombok:lombok:1.18.24' // 이건 뭐냐? 롬복 어노테이션 걸기 위해 이렇게 했다.


    // 이건 뭐냐? 위 롬복 라이브 러리랑 같은데 테스트컴파일온리! 테스트에서 이 라이브러리를 쓰기 위해 이렇게 했다.
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'


    // jstl 이다. jsp에서 for문과 if문 사용 가능
    implementation group: 'jstl', name: 'jstl', version: '1.2'

    // spring 의 webMVC 다. 모델 뷰 컨트롤
    implementation group: 'org.springframework', name: 'spring-webmvc', version: '5.3.27'




    // 번거로운 작업인 DTO -> VO, VO -> DTO 변환은 Modelmapper 라이브러리 이유
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'

    // DTO 의 검증을 위한 Validate 관련 라이브러리
    // 과거의 웹 개발은 자바스크립트를 이용해서 브라우저에서만 유효성 검사를 진행하는 방식이 많았지만,
    // 모바일과 같이 다양한 환경에서 서버를 이용하는 현재에는 브라우저를 사용하는 프론트 쪽에서의 검증과 더불어 서버에서도 입력되는 값들을 검증하는 것이 일반적이다.
    // 이러한 검증작업은 컨트롤러에서 진행되는데 스프링 MVC의 경우 @Valid와 BindingResult 라는 존재를 이용해서 간단하게 처리할 수 있다. 버전6(7은 문제 있을 수 있다.)
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.2.1.Final'





    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}